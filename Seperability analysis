Seperability_analysis <- function(input1, input2, write=FALSE){
  
  species_list <- unique(input1$SPECIES)
  B_dist <- c()
  
  # We need to change length of input. As we have unwanted column
  for (j in 1:(length(input1)-1)){
    #cat("j = ", j, "\n")
    B_dist_F <- c()
    
    for (i in 1:length(species_list)){
      #cat(" i = ", i, "\n")
      #print(species_list[i])
      input1_sp <- input1[which(input1$SPECIES %in% species_list[i]),]
      input2_sp <- input2[which(input2$SPECIES %in% species_list[i]),]
      Sep <- separability(input1_sp[,j], input2_sp[,j]) 
      B_dist_F[i] <- Sep$B
      
    }
    #cat("B_distance for ", names(input1[j]), " for each species = ", B_dist_F, "\n")
    B_dist_fea <- mean(B_dist_F)
    B_dist <- c(B_dist,B_dist_fea)
    #cat("Average B_distance for ", names(input1[j]), "= ", B_dist_fea, "\n")
  }
  B_dist_avg_site <- mean(B_dist)
  cat("Average B_distance between two sites = ", B_dist_avg_site, "\n")
  return(B_dist_avg_site)
}

separability <- function(x, y, plot = FALSE, cols = c("red", "blue"), clabs = c("Class1", "Class2"), ...) {
  if (length(cols) > 2) 
    stop("Too many colors")
  if (length(clabs) > 2) 
    stop("Too many class labels")
  trace.of.matrix <- function(SquareMatrix) {
    sum(diag(SquareMatrix))
  }
  
  x <- as.matrix(x)
  y <- as.matrix(y)
  
  mdif <- mean(x) - mean(y)
  p <- (stats::cov(x) + stats::cov(y))/2
  bh.distance <- 0.125 * t(mdif) * p^(-1) * mdif + 0.5 * log(det(p)/sqrt(det(stats::cov(x)) * det(stats::cov(y))))
  
  m <- (abs(mean(x) - mean(y)))/(stats::sd(x) + stats::sd(y))
  jm.distance <- 2 * (1 - exp(-bh.distance))
  
  dt1 <- 1/2 * trace.of.matrix((stats::cov(x) - stats::cov(y)) * (stats::cov(y)^(-1) - stats::cov(x)^(-1)))
  dt2 <- 1/2 * trace.of.matrix((stats::cov(x)^(-1) + stats::cov(y)^(-1)) * 
                                 (mean(x) - mean(y)) * t(mean(x) - mean(y)))
  divergence <- dt1 + dt2
  transformed.divergence <- 2 * (1 - exp(-(divergence/8)))
  
  if (plot == TRUE) {
    color1 <- as.vector(grDevices::col2rgb(cols[1])/255)
    color2 <- as.vector(grDevices::col2rgb(cols[2])/255)
    d1 <- stats::density(x)
    d2 <- stats::density(y)
    graphics::plot(d1, type = "n", ylim = c(min(c(d1$y, d2$y)), max(c(d1$y, d2$y))),  
                   xlim = c(min(c(d1$x, d2$x)), max(c(d1$x, d2$x))), ...)
    graphics::polygon(d1, col = grDevices::rgb(color1[1], color1[2], color1[3], 1/4))
    graphics::polygon(d2, col = grDevices::rgb(color2[1], color2[2], color2[3], 1/4))
    graphics::abline(v = mean(x), lty = 1, col = "black")
    graphics::abline(v = mean(y), lty = 2, col = "black")
    graphics::legend("topright", legend = clabs, fill = c(grDevices::rgb(color1[1], color1[2], color1[3], 1/4), 
                                                          grDevices::rgb(color2[1], color2[2], color2[3], 1/4)))
  }
  return(data.frame(B = bh.distance, JM = jm.distance, M = m, mdif = abs(mdif), 
                    D = divergence, TD = transformed.divergence))
} 
